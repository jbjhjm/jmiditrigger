/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "pugixml.hpp" 
//#pragma comment( lib, "pugixml" )

/*struct MyListener : public Value::Listener
{
	Class& parent;
	void valueChanged(Value& v)  { parent.handleMyValueChanged(v); }
};*/


//==============================================================================
/**
*/
class JMidiTriggerAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    JMidiTriggerAudioProcessor();
    ~JMidiTriggerAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    String currentStatus = "___";

	XmlElement* pluginState;

    bool loadXmlFile(const String& filePath);
    bool loadXmlFile(const File& fi);
	bool reloadFile();
	void generateXmlDocumentation();
	void cacheXmlData();
	void log(String txt);

	Value xmlFilePath;
	Value statusLog;
	Value midiDataInfo;
	pugi::xml_document xmlDoc;

private:
    //==============================================================================



    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (JMidiTriggerAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
