/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
JMidiTriggerAudioProcessor::JMidiTriggerAudioProcessor()
{
	pluginState = new XmlElement("pluginState");
	pluginState->addChildElement(new XmlElement("xmlFilePath"));
}

JMidiTriggerAudioProcessor::~JMidiTriggerAudioProcessor()
{
}

//==============================================================================
const String JMidiTriggerAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool JMidiTriggerAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool JMidiTriggerAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool JMidiTriggerAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double JMidiTriggerAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int JMidiTriggerAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int JMidiTriggerAudioProcessor::getCurrentProgram()
{
    return 0;
}

void JMidiTriggerAudioProcessor::setCurrentProgram (int index)
{
}

const String JMidiTriggerAudioProcessor::getProgramName (int index)
{
    return String();
}

void JMidiTriggerAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void JMidiTriggerAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void JMidiTriggerAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void JMidiTriggerAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer (channel);

        // ..do something to the data...
    }
}

//==============================================================================
bool JMidiTriggerAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* JMidiTriggerAudioProcessor::createEditor()
{
    return new JMidiTriggerAudioProcessorEditor (*this);
}

//==============================================================================
void JMidiTriggerAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
	copyXmlToBinary(*pluginState, destData);
}

void JMidiTriggerAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
	XmlElement* tmp = getXmlFromBinary(data, sizeInBytes);
	if (tmp) {
		pluginState = tmp;
	}
}

//==============================================================================

bool JMidiTriggerAudioProcessor::loadXmlFile(const File& fi)
{
	log("Debug: Load XML File");
	if (!fi.exists())
	{
		log("Error - file does not exist: " + fi.getFullPathName());
		xmlFilePath = "";
		return false;
	}
	else 
	{
		xmlFilePath = fi.getRelativePathFrom(File::getCurrentWorkingDirectory());
		XmlElement* psXmlFilePath = pluginState->getChildByName("xmlFilePath");
		psXmlFilePath->deleteAllTextElements();
		psXmlFilePath->addTextElement(xmlFilePath.getValue().toString());

		pugi::xml_parse_result xmlReadSuccess = xmlDoc.load_file(xmlFilePath.toString().toRawUTF8());

		if (xmlReadSuccess==false) {
			log("Error while reading XML file: " + String(xmlReadSuccess.description()));
			return xmlReadSuccess;
		}
		else {
			log("Successfully parsed file: " + xmlFilePath.toString());
			generateXmlDocumentation();
			cacheXmlData();
			return xmlReadSuccess;
		}
	}
}


bool JMidiTriggerAudioProcessor::loadXmlFile(const String& filePath)
{
	return this->loadXmlFile(File(filePath));
}

bool JMidiTriggerAudioProcessor::reloadFile()
{
	return this->loadXmlFile(File(xmlFilePath.toString()));
}

void JMidiTriggerAudioProcessor::generateXmlDocumentation()
{
	log("Debug: Generate documentation");
	pugi::xml_node rootNode = xmlDoc.document_element();
	log("Debug: Selected root node " + String( rootNode.name() ) );
	pugi::xml_node listenersNode = rootNode.child("listeners");
	log("Debug: Selected listeners group node " + String(listenersNode.name()));
	String doc = "";
	for (pugi::xml_node listenerNode = listenersNode.child("listener"); listenerNode; listenerNode = listenerNode.next_sibling("listener")) {
		log("Debug: Found a listener node");
		
		doc +=
			"Listener at Channel " + String(listenerNode.attribute("channel").as_string()) +
			" " + String(listenerNode.attribute("type").as_string()) +
			" [ " + String(listenerNode.attribute("key").as_string()) + " " + String(listenerNode.attribute("value").as_string()) + " ] " +
			" \n";
			
	}
	midiDataInfo = doc;
	log("Successfully parsed file: " + xmlFilePath.toString());
}

void JMidiTriggerAudioProcessor::cacheXmlData()
{

}

void JMidiTriggerAudioProcessor::log(String txt)
{
	String tmp = statusLog.getValue().toString();
	tmp.append("\n" + txt, 2000);
	statusLog = tmp;
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new JMidiTriggerAudioProcessor();
}
